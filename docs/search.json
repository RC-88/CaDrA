[{"path":"https://github.com/montilab/CaDrA/articles/docs/basic.html","id":"r-markdown","dir":"Articles > Docs","previous_headings":"","what":"R Markdown","title":"Basic Usage","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) speed           dist         Min.   : 4.0   Min.   :  2.00    1st Qu.:12.0   1st Qu.: 26.00    Median :15.0   Median : 36.00    Mean   :15.4   Mean   : 42.98    3rd Qu.:19.0   3rd Qu.: 56.00    Max.   :25.0   Max.   :120.00"},{"path":"https://github.com/montilab/CaDrA/articles/docs/basic.html","id":"including-plots","dir":"Articles > Docs","previous_headings":"","what":"Including Plots","title":"Basic Usage","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"https://github.com/montilab/CaDrA/articles/docs/data.html","id":"r-markdown","dir":"Articles > Docs","previous_headings":"","what":"R Markdown","title":"Basic Usage","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) speed           dist         Min.   : 4.0   Min.   :  2.00    1st Qu.:12.0   1st Qu.: 26.00    Median :15.0   Median : 36.00    Mean   :15.4   Mean   : 42.98    3rd Qu.:19.0   3rd Qu.: 56.00    Max.   :25.0   Max.   :120.00"},{"path":"https://github.com/montilab/CaDrA/articles/docs/data.html","id":"including-plots","dir":"Articles > Docs","previous_headings":"","what":"Including Plots","title":"Basic Usage","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"https://github.com/montilab/CaDrA/articles/docs/installation.html","id":"r-markdown","dir":"Articles > Docs","previous_headings":"","what":"R Markdown","title":"Basic Usage","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) speed           dist         Min.   : 4.0   Min.   :  2.00    1st Qu.:12.0   1st Qu.: 26.00    Median :15.0   Median : 36.00    Mean   :15.4   Mean   : 42.98    3rd Qu.:19.0   3rd Qu.: 56.00    Max.   :25.0   Max.   :120.00"},{"path":"https://github.com/montilab/CaDrA/articles/docs/installation.html","id":"including-plots","dir":"Articles > Docs","previous_headings":"","what":"Including Plots","title":"Basic Usage","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"https://github.com/montilab/CaDrA/articles/docs/visualize.html","id":"r-markdown","dir":"Articles > Docs","previous_headings":"","what":"R Markdown","title":"Basic Usage","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) speed           dist         Min.   : 4.0   Min.   :  2.00    1st Qu.:12.0   1st Qu.: 26.00    Median :15.0   Median : 36.00    Mean   :15.4   Mean   : 42.98    3rd Qu.:19.0   3rd Qu.: 56.00    Max.   :25.0   Max.   :120.00"},{"path":"https://github.com/montilab/CaDrA/articles/docs/visualize.html","id":"including-plots","dir":"Articles > Docs","previous_headings":"","what":"Including Plots","title":"Basic Usage","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"https://github.com/montilab/CaDrA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vinay Kartha. Author. Stefano Monti. Author. Reina Chau. Author, maintainer. Katia Bulekova. Author.","code":""},{"path":"https://github.com/montilab/CaDrA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kartha V, Monti S, Chau R, Bulekova K (2022). CaDrA: Candidate Driver Analysis. R package version 1.4.1, https://github.com/montilab/CaDrA/.","code":"@Manual{,   title = {CaDrA: Candidate Driver Analysis},   author = {Vinay Kartha and Stefano Monti and Reina Chau and Katia Bulekova},   year = {2022},   note = {R package version 1.4.1},   url = {https://github.com/montilab/CaDrA/}, }"},{"path":"https://github.com/montilab/CaDrA/index.html","id":"cadra","dir":"","previous_headings":"","what":"Candidate Driver Analysis","title":"Candidate Driver Analysis","text":"Candidate Drivers Analysis: Multi-Omic Search Candidate Drivers Functional Signatures CaDrA R package supports heuristic search framework aimed towards identification candidate drivers oncogenic activity. Given binary genomic dataset (rows 1/0 vectors indicating presence/absence genomic features somatic mutations copy number alteration events), together associated sample ranking (samples ranked certain phenotypic readout interest protein expression, pathway activity etc.), CaDrA implements step-wise search algorithm determine set features , together (based occurence union ‘logical ’), -associated observed ranking, making useful finding mutually exclusive largely non-overlapping anomalies can lead pathway phenotype. information, please see associated manuscript Kartha et al. (2019)","code":""},{"path":"https://github.com/montilab/CaDrA/index.html","id":"1-installation","dir":"","previous_headings":"","what":"(1) Installation","title":"Candidate Driver Analysis","text":"","code":"devtools::install_github(\"montilab/CaDrA\") library(CaDrA)"},{"path":[]},{"path":"https://github.com/montilab/CaDrA/index.html","id":"test-run-code-on-simulated-data","dir":"","previous_headings":"(2) Quickstart","what":"Test run code on simulated data","title":"Candidate Driver Analysis","text":"","code":"data(sim.ES) data(topn.list)  # Plot the results from a top-N evaluation by passing the resulting ESet from a specific run # To find the combination of features that had the best score best.meta <- topn.best(topn.list)  # Now we can plot this set of features meta.plot(best.meta$ESet)"},{"path":"https://github.com/montilab/CaDrA/index.html","id":"running-on-your-own-actual-data","dir":"","previous_headings":"(2) Quickstart","what":"Running on your own (actual) data","title":"Candidate Driver Analysis","text":"First, need data (’ve used copy number variation, mutation calls methylation data - anything can basically thresholded / binarized 0/1) ExpressionSet object. example , expression set object named ES.GISTIC.Mut. thing need variable used rank matrix (, variable called score). ranking variable dictates CaDrA search grouped meta-features. default, look things left-skewed, can rank variable either ascending order descending order look features enriched either end (example , interested looking features enriched higher scores samples, hence ranking descending order score first) function calls pre-processing example steps follows:","code":"# Binarize ES to only have 0's and 1's exprs(ES.GISTIC.Mut)[exprs(ES.GISTIC.Mut)>1] <- 1  # Pre-filter ESet based on occurrence frequency ES.GISTIC.Mut.filt <- prefilter_data(ES = ES.GISTIC.Mut,max.cutoff = 0.7,min.cutoff = 0.03) # no more than 70%, no less than 3%  # Order of samples in decreasing order of supplied continuous variable sample.order <- order(score,decreasing=TRUE)  # Number of top starting seed features to test and evaluate over   top_n <- 7  # Metric used for stepwise greedy search # Either ks or wilcox is supported method <- \"ks\"  topn.l <- topn.eval(ESet = ES.GISTIC.Mut.filt,                      method=method,                     N = top_n,                     do.plot = FALSE, #We will plot it AFTER finding the best hits                     best.score.only = FALSE,                     ranking=sample.order,                     verb=FALSE)  # Now we can fetch the ESet and feature that corresponded to the best score over the top N search topn.best.meta <- topn.best(topn.l)  # Visualize best result meta.plot(ESet = topn.best.meta$ESet,           var.score = score[sample.order],           var.name = \"Activity score\") #Y-axis label for plot   # You can also evaluate how robust the results are depending on which seed feature you started with  topn.plot(topn.l)"},{"path":"https://github.com/montilab/CaDrA/reference/CaDrA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Candidate Driver Analysis — CaDrA-package","title":"Candidate Driver Analysis — CaDrA-package","text":"Supports identification candidate (epi)genetic drivers using step-wise heuristic search approach given ranked genomic data.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/CaDrA-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Candidate Driver Analysis — CaDrA-package","text":"library(CaDrA)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/CaDrA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Candidate Driver Analysis — CaDrA-package","text":"Vinay Kartha Stefano Monti Maintainer: Vinay Kartha <vkartha@bu.edu>","code":""},{"path":"https://github.com/montilab/CaDrA/reference/CaDrA-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Candidate Driver Analysis — CaDrA-package","text":"Kartha VK, Kern JG, Sebastiani P, Zhang L, Varelas X, Monti S (2017) CaDrA: computational framework performing candidate driver analyses using binary genomic features. (bioRxiv)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":null,"dir":"Reference","previous_headings":"","what":"CaDrA Search — cadra_search","title":"CaDrA Search — cadra_search","text":"Performs permutation-based testing using results candidate_search() function.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CaDrA Search — cadra_search","text":"","code":"cadra_search(   ES,   input_score,   method = \"ks\",   custom_function = NULL,   custom_parameters = NULL,   alternative = \"less\",   metric = \"pval\",   weights = NULL,   target_match = \"positive\",   top_N = NULL,   search_start = NULL,   search_method = \"both\",   max_size = 7,   n_perm = 1000,   seed = 123,   smooth = TRUE,   obs_best_score = NULL,   plot = TRUE,   ncores = 1,   cache_path = NULL,   return_perm_pval = TRUE )"},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CaDrA Search — cadra_search","text":"ES expression set binary features (required). must BioBase expressionSet object. rownames expression set must contain unique features used search best features. input_score vector continuous values target profile (required). input_score object must names labels match colnames expression matrix. method character string specifies method compute score feature (\"ks\" \"wilcox\" \"revealer\" (conditional mutual information REVEALER) \"custom\" (customized method)). Default ks. custom_function method \"custom\", specifies customized function . Default NULL. custom_parameters method \"custom\", specifies list arguments passed custom_function(). Default NULL. alternative character string specifies alternative hypothesis testing (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. metric character string specifies metric use candidate search criteria. \"pval\" \"stat\" may used, corresponding score p-value statistic. Default pval. weights vector weights use perform weighted-KS testing. Default NULL. target_match direction target matching (\"negative\" \"positive\") REVEALER. Use \"positive\" match higher values target, \"negative\" match lower values. Default positive. top_N integer specifies number features start search , starting top 'N' features case. Default NULL. search_start integer specifies index within expression set object feature start candidate search . Default NULL. NULL, search starts top ranked feature. integer specified (N, N < nrow(ES)), search starts Nth best feature. string specified, search starts feature name (must valid rowname ES) search_method character string specifies method filter best candidates (\"forward\" \"\"). Default (backward forward). max_size integer specifies maximum size meta-feature can extend given search. Default 7. n_perm integer specifies number permutations perform. Default 1000. seed seed set permutation. Default 123. smooth logical value indicates whether smooth p-value calculation avoid p-value 0. Default TRUE. obs_best_score numeric value corresponding observed (best) candidate search score use permutation based p-value computation. Default NULL. set NULL, compute observed score given input_score ES variables. plot logical value indicates whether plot empirical null distribution observed score permutation p-value. Default TRUE. ncores integer specifies number cores perform parallelization permutation testing. Default 1. cache_path full path uses cache permutation-based score distributions. permutation given ES dependent search variables 'N' exist, recycle values instead re-computing save time. Default NULL. NULL, cache path set ~/.Rcache future loading. return_perm_pval logical value indicates whether return permutation-based p-value computed function. Default TRUE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CaDrA Search — cadra_search","text":"return_perm_pval set TRUE, return permutation p-value.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CaDrA Search — cadra_search","text":"Reina Chau","code":""},{"path":"https://github.com/montilab/CaDrA/reference/cadra_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CaDrA Search — cadra_search","text":"","code":"# Load R library library(Biobase) #> Loading required package: BiocGenerics #> Loading required package: parallel #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:parallel’: #>  #>     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, #>     clusterExport, clusterMap, parApply, parCapply, parLapply, #>     parLapplyLB, parRapply, parSapply, parSapplyLB #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.  # Load pre-computed expression set data(sim.ES)  # set seed set.seed(123)  # Provide a vector of continuous scores for a target profile with names to each score value  input_score = rnorm(n = ncol(sim.ES)) names(input_score) <- colnames(sim.ES)  # Define additional parameters and start the function # Not run as this would take some time to run # candidate_search_result <- cadra_search( #  ES = sim.ES, input_score = input_score, method = \"ks\", weights = NULL, #  alternative = \"less\", metric = \"pval\", top_N = NULL,  #  search_start = NULL, search_method = \"both\", max_size = 7, n_perm = 1000,  #  seed = 123, plot = TRUE, smooth = TRUE, obs_best_score = NULL,  #  ncores = 1, cache_path = NULL, return_perm_pval = TRUE #)"},{"path":"https://github.com/montilab/CaDrA/reference/candidate_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Candidate Search — candidate_search","title":"Candidate Search — candidate_search","text":"Performs heuristic search set binary features determine whether features whose union skewed (enriched extremes) either features alone. main functionality CaDrA package.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/candidate_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candidate Search — candidate_search","text":"","code":"candidate_search(   ES,   input_score,   method = \"ks\",   custom_function = NULL,   custom_parameters = NULL,   alternative = \"less\",   metric = \"stat\",   weights = NULL,   target_match = \"positive\",   search_start = NULL,   search_method = \"both\",   max_size = 7,   best_score_only = FALSE,   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/candidate_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Candidate Search — candidate_search","text":"ES expression set binary features (required). must BioBase expressionSet object. rownames expression set must contain unique features used search. input_score vector continuous values target profile (required). input_score must names labels matches colnames expression matrix. method character string specifies method compute score feature (\"ks\" \"wilcox\" \"revealer\" (conditional mutual information REVEALER) \"custom\" (customized method)). Default ks. custom_function method \"custom\", specifies customized function . Default NULL. custom_parameters method \"custom\", specifies list arguments passed custom_function(). Default NULL. alternative character string specifies alternative hypothesis testing (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. metric character string specifies metric search best features. \"pval\" \"stat\" may used, corresponding p-value score statistic. Default pval. Note: Revealer method return score statistics values. weights vector weights use perform weighted-KS testing. Default NULL. target_match direction target matching (\"negative\" \"positive\") REVEALER. Use \"positive\" match higher values target, \"negative\" match lower values. Default positive. search_start integer specifies index within expression set object feature start candidate search . Default NULL. NULL, search starts top ranked feature. integer specified (N, N < nrow(ES)), search starts Nth best feature. string specified, search starts feature name (must valid rowname ES) search_method character string specifies method filter best candidates (\"forward\" \"\"). Default (backward forward). max_size integer specifies maximum size meta-feature can extend given search. Default 7. best_score_only logical value indicates whether function return score corresponding search results. Default FALSE. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/candidate_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Candidate Search — candidate_search","text":"best_score_only set TRUE, function returns list object score corresponding union search meta-feature. best_score_only set FALSE, list containing ES object pertaining returned meta-feature well corresponding score returned.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/candidate_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candidate Search — candidate_search","text":"","code":"# Load R library library(Biobase)  # Load pre-computed expression set data(sim.ES)  # set seed set.seed(123)  # Provide a vector of continuous scores for a target profile with names to each score value  input_score = rnorm(n = ncol(sim.ES)) names(input_score) <- colnames(sim.ES)  # Define additional parameters and run the function candidate_search_result <- candidate_search(   ES = sim.ES, input_score = input_score, method = \"ks\",    alternative = \"less\", weights = NULL, metric = \"pval\",    search_start = NULL, search_method = \"both\",    max_size = 7, best_score_only = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/compute_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute skewdness scores per feature — compute_score","title":"Compute skewdness scores per feature — compute_score","text":"Compute scores based skewdness given binary matrix (based sample ordering) used stepwise search","code":""},{"path":"https://github.com/montilab/CaDrA/reference/compute_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute skewdness scores per feature — compute_score","text":"","code":"compute_score(mat, method = c(\"ks\", \"wilcox\"), ...)"},{"path":"https://github.com/montilab/CaDrA/reference/compute_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute skewdness scores per feature — compute_score","text":"mat matrix binary features compute row-wise ks scores method character string specifying method used score features, must one \"ks\" \"wilcox\" ... additional arguments provided either ks.genescore() wilcox.genescore() functions depending method choice","code":""},{"path":"https://github.com/montilab/CaDrA/reference/custom_genescore_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized Scoring Method — custom_genescore_mat","title":"Customized Scoring Method — custom_genescore_mat","text":"Compute row-wise scoring row given binary feature matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/custom_genescore_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized Scoring Method — custom_genescore_mat","text":"","code":"custom_genescore_mat(   mat,   input_score,   custom_function,   custom_parameters = NULL,   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/custom_genescore_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customized Scoring Method — custom_genescore_mat","text":"mat matrix binary features (required). NOTE: provided mat along input_score custom_parameters passed arguments custom_function() later used compute row-wise scoring row given binary feature. input_score vector continuous values targeted profile (required). input_score must include labels names associated colnames binary feature matrix. NOTE: input_score passed one arguments custom_function(). custom_function customized function perform row-wise scoring row given binary feature matrix (required). NOTE: function must return data frame one two columns: score p_value . custom_parameters list additional arguments passed custom_function() (exluding mat input_score parameters). verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/custom_genescore_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customized Scoring Method — custom_genescore_mat","text":"data frame one two columns: score p_value ","code":""},{"path":"https://github.com/montilab/CaDrA/reference/custom_genescore_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customized Scoring Method — custom_genescore_mat","text":"","code":"# Load R library library(Biobase)   # Examples of a customized function using ks-test function customized_genescore_mat <- function(mat, input_score, alternative){   result <- 1:nrow(mat) %>%      purrr::map_dfr(       function(r){          feature = mat[r,];         x = input_score[which(feature==1)]; y = input_score[which(feature==0)];         res <- ks.test(x, y, alternative=alternative)         return(data.frame(score=res$statistic, p_value=res$p.value))    }) }  # Load pre-computed expression set data(sim.ES)  mat = exprs(sim.ES)  # set seed set.seed(123)  # Provide a vector of continuous scores for a target profile input_score = rnorm(n = ncol(sim.ES)) names(input_score) <- colnames(sim.ES)  # Define additional parameters and start the function custom_genescore_result <- custom_genescore_mat(   mat = mat,   input_score = input_score,   custom_function = customized_genescore_mat,    custom_parameters = list(alternative = \"less\") )"},{"path":"https://github.com/montilab/CaDrA/reference/generate_permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Random permutation matrix generator — generate_permutations","title":"Random permutation matrix generator — generate_permutations","text":"Produces random permutation rank matrix given vector values Produces random permutation rank matrix given vector values","code":""},{"path":"https://github.com/montilab/CaDrA/reference/generate_permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random permutation matrix generator — generate_permutations","text":"","code":"generate_permutations(ord, n_perms, seed = 123)  generate_permutations(ord, n_perms, seed = 123)"},{"path":"https://github.com/montilab/CaDrA/reference/generate_permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random permutation matrix generator — generate_permutations","text":"ord vector permuted. determines number columns permutation matrix n_perms number permutations generate. determines number rows permutation matrix seed seed can set reproducibility 'random' results. Default 123","code":""},{"path":"https://github.com/montilab/CaDrA/reference/generate_permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random permutation matrix generator — generate_permutations","text":"row matrix permuted values (.e. ranks) row single permutation result row matrix permuted values (.e. ranks) row single permutation result","code":""},{"path":"https://github.com/montilab/CaDrA/reference/kde2d_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"kde2d_wrap_ wrapper — kde2d_wrap","title":"kde2d_wrap_ wrapper — kde2d_wrap","text":"Simplified version Two-Dimensional Kernel Density Estimation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/kde2d_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kde2d_wrap_ wrapper — kde2d_wrap","text":"","code":"kde2d_wrap(x, y, h, n = 25, lims = c(range(x), range(y)))"},{"path":"https://github.com/montilab/CaDrA/reference/kde2d_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kde2d_wrap_ wrapper — kde2d_wrap","text":"x x coordinate data y y coordinate data h vector bandwidths x y directions. n length lims limits rectangle covered grid c(xl, xu, yl, yu).","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks.genescore.mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise matrix Kolmogorov-Smirnov scoring — ks.genescore.mat","title":"Row-wise matrix Kolmogorov-Smirnov scoring — ks.genescore.mat","text":"Compute directional KS scores row given binary matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks.genescore.mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-wise matrix Kolmogorov-Smirnov scoring — ks.genescore.mat","text":"","code":"ks.genescore.mat(mat, alt = c(\"two.sided\", \"less\", \"greater\"), weight = NULL)"},{"path":"https://github.com/montilab/CaDrA/reference/ks.genescore.mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise matrix Kolmogorov-Smirnov scoring — ks.genescore.mat","text":"mat matrix binary features compute row-wise scores based  Kolmogorov-Smirnov test alt character string specifying alternative hypothesis, must one \"two.sided\",\"less\" \"greater\". Value passed ks.genescore() function weight vector weights use performing weighted-KS test. Default NULL. Value passed ks.genescore() function","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks.genescore.mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise matrix Kolmogorov-Smirnov scoring — ks.genescore.mat","text":"2 x N matrix (N = number rows matrix) first second rows corresponding KS scores p-values, respectively","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kolmogorov-Smirnov score for a given ranked list — ks_gene_score","title":"Compute a Kolmogorov-Smirnov score for a given ranked list — ks_gene_score","text":"Compute Kolmogorov-Smirnov score given ranked list","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kolmogorov-Smirnov score for a given ranked list — ks_gene_score","text":"","code":"ks_gene_score(   n.x,   y,   weights = NULL,   weight_p = 1,   alternative = \"less\",   do_pval = TRUE,   absolute = FALSE,   exact = NULL,   plot_dat = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kolmogorov-Smirnov score for a given ranked list — ks_gene_score","text":"n.x length ranked list y positions interested geneset items ranked list weights weights weighted score (see Subramanian et al.) (usually, sort(score)) weight_p weights exponent alternative alternative hypothesis p-value calculation do_pval compute asymptotic p-value absolute takes max - min score rather maximum deviation null exact compute exact p-value plot_dat return dataframe x y axis data ES plot","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kolmogorov-Smirnov score for a given ranked list — ks_gene_score","text":"data frame two columns: score p_value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","title":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","text":"Compute directional KS scores row given binary matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","text":"","code":"ks_gene_score_mat(   mat,   weights = NULL,   alternative = c(\"two.sided\", \"greater\", \"less\"),   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","text":"mat matrix binary features compute row-wise scores based Kolmogorov-Smirnov test. weights vector weights perform weighted-KS test. Default NULL. NULL, weights must include labels names associated colnames feature matrix. alternative character string specifies alternative hypothesis testing (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","text":"data frame two columns: score p_value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_gene_score_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kolmogorov-Smirnov Scoring Method — ks_gene_score_mat","text":"","code":"# Load R library library(Biobase)  # Load pre-computed expression set data(sim.ES)  # Define additional parameters and start the function ks_gene_score_mat_result <- ks_gene_score_mat(   mat = exprs(sim.ES),    weights = NULL,   alternative = \"less\" )"},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute KS scores for each row of a given matrix — ks_genescore_mat","title":"Compute KS scores for each row of a given matrix — ks_genescore_mat","text":"Compute directional Kolmogorov-Smirnov scores row given binary matrix Compute directional Kolmogorov-Smirnov scores row given binary matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute KS scores for each row of a given matrix — ks_genescore_mat","text":"","code":"ks_genescore_mat(mat, alt = \"less\", weight)  ks_genescore_mat(mat, alt = \"less\", weight)"},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute KS scores for each row of a given matrix — ks_genescore_mat","text":"mat matrix binary features compute row-wise ks scores alt integer value specifying alternative hypothesis weight vector weights use performing weighted-KS test","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"ks.genescore wrapper — ks_genescore_wrap","title":"ks.genescore wrapper — ks_genescore_wrap","text":"Compute directional Kolmogorov-Smirnov scores row given vector Compute directional Kolmogorov-Smirnov scores row given vector","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ks.genescore wrapper — ks_genescore_wrap","text":"","code":"ks_genescore_wrap(n_x, y, weight, alt = \"less\")  ks_genescore_wrap(n_x, y, weight, alt = \"less\")"},{"path":"https://github.com/montilab/CaDrA/reference/ks_genescore_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ks.genescore wrapper — ks_genescore_wrap","text":"n_x length ranked list y positions geneset items ranked list (ranks) weight vector weights alt alternative hypothesis p-value calculation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_plot_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"ks_plot wrapper — ks_plot_wrap","title":"ks_plot wrapper — ks_plot_wrap","text":"Return dataframe ks_genescore function Return dataframe ks_genescore function","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_plot_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ks_plot wrapper — ks_plot_wrap","text":"","code":"ks_plot_wrap(n_x, y, weight, alt = \"less\")  ks_plot_wrap(n_x, y, weight, alt = \"less\")"},{"path":"https://github.com/montilab/CaDrA/reference/ks_plot_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ks_plot wrapper — ks_plot_wrap","text":"n_x length ranked list y positions geneset items ranked list (ranks) weight vector weights alt alternative hypothesis p-value calculation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_test_double_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"ks_test_d_wrap_ wrapper — ks_test_double_wrap","title":"ks_test_d_wrap_ wrapper — ks_test_double_wrap","text":"Compute directional Kolmogorov-Smirnov scores Compute directional Kolmogorov-Smirnov scores","code":""},{"path":"https://github.com/montilab/CaDrA/reference/ks_test_double_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ks_test_d_wrap_ wrapper — ks_test_double_wrap","text":"","code":"ks_test_double_wrap(n_x, y, alt = \"less\")  ks_test_double_wrap(n_x, y, alt = \"less\")"},{"path":"https://github.com/montilab/CaDrA/reference/ks_test_double_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ks_test_d_wrap_ wrapper — ks_test_double_wrap","text":"n_x length ranked list y positions geneset items ranked list (ranks) alt alternative hypothesis p-value calculation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Step-wise heuristic search plot — meta.plot","title":"Step-wise heuristic search plot — meta.plot","text":"Plot stepwise search results given CaDrA run. Plot include optional bar plot continuous ranking variable (top),","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step-wise heuristic search plot — meta.plot","text":"","code":"meta.plot(ESet, var.score = NULL, var.name = \"\")"},{"path":"https://github.com/montilab/CaDrA/reference/meta.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step-wise heuristic search plot — meta.plot","text":"ESet ESet object containing features returned stepwise.search() function () var.score optional integer vector continuous measures used rank samples stepwise search (assumed matching order) var.name string object describing name continuous measure used, used y-axis label metric plot","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Step-wise heuristic search plot — meta.plot","text":"plot graphic ranked metric plot (optional), tile plot features within provided ESet, corresponding Enrichment Score (ES) given distribution (, correspond logical features)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Step-wise heuristic search plot — meta.plot","text":"","code":"data(sim.ES) data(topn.list)  # Plot the results from a top-N evaluation by passing the resulting ESet from a specific run # To find the combination of features that had the best score best.meta <- topn.best(topn.list)   # Now we can plot this set of features meta.plot(best.meta$ESet)  # If a continuous ranking variable was used for the sample-ranking, we can visualize it together # Just for illustation purposes, we simulate random sample scores sample.scores <- sort(runif(ncol(sim.ES),0,1),decreasing=TRUE) meta.plot(best.meta$ESet,var.score=sample.scores,var.name=\"My ranking variable\")"},{"path":"https://github.com/montilab/CaDrA/reference/meta_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Candidate heuristic search plot — meta_plot","title":"Candidate heuristic search plot — meta_plot","text":"Plot candidate search results given CaDrA run. Plot include optional bar plot continuous ranking variable (top),","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candidate heuristic search plot — meta_plot","text":"","code":"meta_plot(ESet, var_score = NULL, var_name = \"\")"},{"path":"https://github.com/montilab/CaDrA/reference/meta_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Candidate heuristic search plot — meta_plot","text":"ESet ESet object containing features returned candidate_search() function () var_score optional integer vector continuous measures used rank samples stepwise search (assumed matching order) var_name string object describing name continuous measure used, used y-axis label metric plot","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Candidate heuristic search plot — meta_plot","text":"plot graphic ranked metric plot (optional), tile plot features within provided ESet, corresponding Enrichment Score (ES) given distribution (, correspond logical features)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/meta_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candidate heuristic search plot — meta_plot","text":"","code":"data(sim.ES) data(topn.list)  # Plot the results from a top-N evaluation by passing the resulting ESet from a specific run # To find the combination of features that had the best score best_meta <- topn_best(topn_list=topn.list)   # Now we can plot this set of features meta_plot(best_meta$ESet)  # If a continuous ranking variable was used for the sample-ranking, we can visualize it together # Just for illustration purposes, we simulate random sample scores sample_scores <- sort(runif(ncol(sim.ES),0,1), decreasing=TRUE) meta_plot(ESet=best_meta$ESet, var_score=sample_scores, var_name=\"My ranking variable\")"},{"path":"https://github.com/montilab/CaDrA/reference/null.search.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation-based step-wise searching — null.search","title":"Permutation-based step-wise searching — null.search","text":"Performs permutation-based significance testing step-wise search results.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/null.search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation-based step-wise searching — null.search","text":"","code":"null.search(   ranking = NULL,   ES,   nperm = 1000,   plot = TRUE,   obs.best.score = NULL,   cache.path = NULL,   smooth = TRUE,   return.perm.pval = FALSE,   seed = 123,   ncores = 1,   ... )"},{"path":"https://github.com/montilab/CaDrA/reference/null.search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation-based step-wise searching — null.search","text":"ranking vector containing rankings sample ordering. Default NULL. NULL, assume ESet already ranked. used compute observed stepwise search score, provided ES ordered expression set object sample ordering features processed stepwise.search() function performing step-wise heuristic search nperm integer specifying number permutations perform. Default = 1000 plot logical indicating whether plot emperical null distribution observed score permutation p-value obs.best.score numeric value corresponding observed (best) stepwise search score use permutation based p-value computation. Default NULL. set NULL, compute observed score given ranking variable ESet cache.path full path permutation-based (null) score distributions cache files. permutation given dataset (dependent search variables 'N') exist, recycle values instead re-computing save time. Default NULL. NULL, cache path set default ~/.Rcache future cache loading. smooth logical indicating whether smoothen p-value calculation avoid p-value 0. Default TRUE return.perm.pval logical indicating whether return permutation-based p-value computed function. Default FALSE seed seed set permutation. Default = 123 ncores number cores use, using parallelization permutation testing. Default = 1 ... additional parameters passed stepwise.seach() function, applied permutation run (called within topn.eval())","code":""},{"path":"https://github.com/montilab/CaDrA/reference/null.search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation-based step-wise searching — null.search","text":"return.perm.pval set TRUE, return permutation p-value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/perm.res.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Results — perm.res","title":"Permutation Results — perm.res","text":"resulting list object returned topn.eval() run sim.ES simulated dataset. default parameters used running topn.eval() except max.size set 10  account presence 10 left-skewed (.e. true positive TP)  features sim.ES dataset.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/perm.res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Results — perm.res","text":"","code":"data(perm.res)"},{"path":"https://github.com/montilab/CaDrA/reference/perm.res.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Permutation Results — perm.res","text":"list object returned topn.eval containing ExpressionSet objects (corresponding meta-feature scores) search run starting top 7 ranked features. Returned ExpressionSet columns (.e. samples) ranked user-defined ranking variable.   See topn.eval information.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/perm.res.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutation Results — perm.res","text":"Kartha VK, Kern JG, Sebastiani P, Zhang L, Varelas X, Monti S (2017) CaDrA: computational framework performing  candidate driver analyses using binary genomic features.  (bioRxiv)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/perm.res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Results — perm.res","text":"","code":"data(perm.res)"},{"path":"https://github.com/montilab/CaDrA/reference/permutation_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Plot — permutation_plot","title":"Permutation Plot — permutation_plot","text":"Plots Emperical Null distribution","code":""},{"path":"https://github.com/montilab/CaDrA/reference/permutation_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Plot — permutation_plot","text":"","code":"permutation_plot(permutation_results)"},{"path":"https://github.com/montilab/CaDrA/reference/permutation_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Plot — permutation_plot","text":"permutation_results list lists, list entry one returned candidate search run given starting index. computed within can returned topn.eval() function.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/permutation_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Plot — permutation_plot","text":"density plot","code":""},{"path":"https://github.com/montilab/CaDrA/reference/permutation_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Plot — permutation_plot","text":"","code":"# Load pre-computed Top-N list generated for sim.ES dataset data(topn.list) topn_plot(topn.list) #> Generating top N overlap heatmap.. #>"},{"path":"https://github.com/montilab/CaDrA/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://github.com/montilab/CaDrA/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ES.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment Score (ES) plot — plot_ES","title":"Enrichment Score (ES) plot — plot_ES","text":"Plot ES running sum statistic, including max score (KS) using x y-axis data returned ks.genescore() plot.dat set TRUE given dataset","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment Score (ES) plot — plot_ES","text":"","code":"plot_ES(d)"},{"path":"https://github.com/montilab/CaDrA/reference/plot_ES.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment Score (ES) plot — plot_ES","text":"d data frame object columns 'x' 'y' containing necessary data ES plot (returned ks.genescore() plot.dat set TRUE given dataset)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ES.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment Score (ES) plot — plot_ES","text":"plot graphic Enrichment Score (ES) given distribution","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ESet.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment Score (ES) plot — plot_ESet","title":"Enrichment Score (ES) plot — plot_ESet","text":"Plot ES running sum statistic, including max score (KS) using x y-axis data returned ks.genescore() plot.dat set TRUE given dataset","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ESet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment Score (ES) plot — plot_ESet","text":"","code":"plot_ESet(d)"},{"path":"https://github.com/montilab/CaDrA/reference/plot_ESet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment Score (ES) plot — plot_ESet","text":"d data frame object columns 'x' 'y' containing necessary data ES plot (returned ks.genescore() plot.dat set TRUE given dataset)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/plot_ESet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment Score (ES) plot — plot_ESet","text":"plot graphic Enrichment Score (ES) given distribution","code":""},{"path":"https://github.com/montilab/CaDrA/reference/prefilter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-filter features — prefilter_data","title":"Pre-filter features — prefilter_data","text":"Pre-filter dataset prior running step-wise heuristic search order avoid testing features prevalent sparse across samples dataset Pre-filter dataset prior running step-wise heuristic search order avoid testing features prevalent sparse across samples dataset","code":""},{"path":"https://github.com/montilab/CaDrA/reference/prefilter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-filter features — prefilter_data","text":"","code":"prefilter_data(ES, max.cutoff = 0.6, min.cutoff = 0.03)  prefilter_data(ES, max.cutoff = 0.6, min.cutoff = 0.03)"},{"path":"https://github.com/montilab/CaDrA/reference/prefilter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-filter features — prefilter_data","text":"ES expression set object containing binary features used step-wise search max.cutoff numeric value 0 1 describing absolute prevalence feature across samples dataset feature filtered . Default 0.6 (feature occur 60 percent samples removed) min.cutoff numeric value 0 1 describing absolute prevalence feature across samples dataset feature filtered . Default 0.03 (feature occur 3 percent less samples removed)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/prefilter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-filter features — prefilter_data","text":"expression set object filtered-features given filter thresholds specified expression set object filtered-features given filter thresholds specified","code":""},{"path":"https://github.com/montilab/CaDrA/reference/prefilter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-filter features — prefilter_data","text":"","code":"data(sim.ES)  # Filter out features having < 3 and > 60% prevalence across all samples (default) sim.ES.filt1 <- prefilter_data(sim.ES) #> Pre-filtering features .. #>  #> Removing features having <  3 and >  60  % occurence in sample set.. #> 883  features retained out of  1000  supplied features in dataset #>   # Change the min cut-off to 1% prevalence, instead of the default 3% sim.ES.filt2 <- prefilter_data(sim.ES,min.cutoff=0.01) #> Pre-filtering features .. #>  #> Removing features having <  1 and >  60  % occurence in sample set.. #> 1000  features retained out of  1000  supplied features in dataset #>   # Change the max cut-off to 65% prevalence, instead of the default 60% sim.ES.filt3 <- prefilter_data(sim.ES,max.cutoff=0.65)  #> Pre-filtering features .. #>  #> Removing features having <  3 and >  65  % occurence in sample set.. #> 883  features retained out of  1000  supplied features in dataset #>   data(sim.ES)  # Filter out features having < 3 and > 60% prevalence across all samples (default) sim.ES.filt1 <- prefilter_data(sim.ES) #> Pre-filtering features .. #>  #> Removing features having <  3 and >  60  % occurence in sample set.. #> 883  features retained out of  1000  supplied features in dataset #>   # Change the min cut-off to 1% prevalence, instead of the default 3% sim.ES.filt2 <- prefilter_data(sim.ES,min.cutoff=0.01) #> Pre-filtering features .. #>  #> Removing features having <  1 and >  60  % occurence in sample set.. #> 1000  features retained out of  1000  supplied features in dataset #>   # Change the max cut-off to 65% prevalence, instead of the default 60% sim.ES.filt3 <- prefilter_data(sim.ES,max.cutoff=0.65)  #> Pre-filtering features .. #>  #> Removing features having <  3 and >  65  % occurence in sample set.. #> 883  features retained out of  1000  supplied features in dataset #>"},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Conditional Mutual Information of x and y given z from REVEALER — revealer_genescore","title":"Compute Conditional Mutual Information of x and y given z from REVEALER — revealer_genescore","text":"Compute Conditional Mutual Information x y given z REVEALER","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Conditional Mutual Information of x and y given z from REVEALER — revealer_genescore","text":"","code":"revealer_genescore(   x,   y,   z = NULL,   assoc_metric = \"IC\",   target_match = \"positive\" )"},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Conditional Mutual Information of x and y given z from REVEALER — revealer_genescore","text":"x vector continuous values given functional response interest y binary feature given response interest z binary feature often known causes activation associated given response interest assoc_metric association metric: information coefficient (\"IC\" default) correlation (\"COR\") REVEALER target_match direction target matching (\"negative\" \"positive\"). Use \"positive\" match higher values target, \"negative\" match lower values. Default positive.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Conditional Mutual Information of x and y given z from REVEALER — revealer_genescore","text":"data frame two columns: score p_value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"REVEALER Scoring Method — revealer_genescore_mat","title":"REVEALER Scoring Method — revealer_genescore_mat","text":"Compute conditional mutual information x y given z row given binary feature matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"REVEALER Scoring Method — revealer_genescore_mat","text":"","code":"revealer_genescore_mat(   mat,   input_score,   target_match = \"positive\",   seed_names = NULL,   assoc_metric = c(\"IC\", \"COR\"),   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"REVEALER Scoring Method — revealer_genescore_mat","text":"mat matrix binary features (required) input_score vector continuous values targeted profile (required). input_score must include labels names associated colnames feature matrix. target_match direction target matching (\"negative\" \"positive\"). Use \"positive\" match higher values target, \"negative\" match lower values. Default positive. seed_names one features(s) associated activation given targeted profile assoc_metric association metric: \"IC\" information coefficient \"COR\" correlation. Default IC. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"REVEALER Scoring Method — revealer_genescore_mat","text":"data frame one column: score","code":""},{"path":"https://github.com/montilab/CaDrA/reference/revealer_genescore_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"REVEALER Scoring Method — revealer_genescore_mat","text":"","code":"# Load R library library(Biobase)  # Load pre-computed expression set data(sim.ES)  # set seed set.seed(123)  # Provide a vector of continuous scores for a target profile input_score = rnorm(n = ncol(sim.ES)) names(input_score) <- colnames(sim.ES)  # Define additional parameters and start the function revealer_genescore_result <- revealer_genescore_mat(   mat = exprs(sim.ES), input_score = input_score, target_match = \"positive\", assoc_metric = \"IC\" )"},{"path":"https://github.com/montilab/CaDrA/reference/sim.ES.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated binary genomic data — sim.ES","title":"Simulated binary genomic data — sim.ES","text":"Simulated matrix representing dataset genomic features used input CaDrA performing stepwise search Matrix rows comprise 1000 features represented 1/0 vectors  indicating presence/absence feature sample (column) Features include 10 left-skewed (.e. True Positive TP)  990 uniformly-distributed (.e. True Null TN)  features","code":""},{"path":"https://github.com/montilab/CaDrA/reference/sim.ES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated binary genomic data — sim.ES","text":"","code":"data(sim.ES)"},{"path":"https://github.com/montilab/CaDrA/reference/sim.ES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated binary genomic data — sim.ES","text":"object class ExpressionSet containing matrix 1000 rows (features) 200 columns (samples)  see (ExpressionSet documentation)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/sim.ES.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated binary genomic data — sim.ES","text":"Kartha VK, Kern JG, Sebastiani P, Zhang L, Varelas X, Monti S (2017) CaDrA: computational framework performing  candidate driver analyses using binary genomic features.  (bioRxiv)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/stepwise.search.html","id":null,"dir":"Reference","previous_headings":"","what":"Step-wise search — stepwise.search","title":"Step-wise search — stepwise.search","text":"Performs step-wise heuristic search using ordered set binary features see whether features whose union skewed (enriched extremes) either features alone. main functionality CaDrA package.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/stepwise.search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step-wise search — stepwise.search","text":"","code":"stepwise.search(   ranking = NULL,   ES,   max.size = 7,   metric = \"pval\",   method = c(\"ks\", \"wilcox\"),   back_search = TRUE,   cust_start = NULL,   best.score.only = FALSE,   alt = \"less\",   wts = NULL,   rnks = NULL,   verb = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/stepwise.search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step-wise search — stepwise.search","text":"ranking vector containing rankings sample ordering. Default NULL. NULL, assume ESet already ranked ES expression set object binary features. first column featureData expression set must contain names corresponding features, used search max.size integer specifying maximum size meta-feature can extend given search. Default 7 metric character string specifying metric use stepwise search criteria. One either 'pval' 'stat' may used, corresponding score p-value statistic. Default 'pval' method character string specifying method used compute scores features, must one \"ks\" \"wilcox\" back_search logical indicating whether perform forward-backward search (.e. remove features along search improves best score). Default TRUE. Uses function backward_check() cust_start integer specifying specific index within expression set object feature start step-wise search . Default NULL. NULL, search starts top ranked feature. integer specified (N, N < nrow(dataset)), search starts Nth best feature. string specified, search starts feature name (must valid rowname dataset) best.score.logical indicating whether function return score corresponding search results. Default FALSE alt character string specifying alternative hypothesis, must one \"two.sided\",\"greater\" \"less\". Default \"less\" left-skewed significance testing. wts integer vector weights use performing weighted-KS testing. Default NULL. Value passed compute_score() function rnks integer vector sample rankings use performing Wilcoxon rank sum testing. Default NULL. NULL, samples assumed ordered increasing ranking. Value passed compute_score() function verb logical indicating whether print diagnostic messages. Default FALSE","code":""},{"path":"https://github.com/montilab/CaDrA/reference/stepwise.search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Step-wise search — stepwise.search","text":"best.score.set TRUE, function returns list object score corresponding union search meta-feature. set FALSE, list containing ESet object pertaining returned meta-feature well corresponding score  returned.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.best.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 'N' best — topn.best","title":"Top 'N' best — topn.best","text":"Takes resulting list meta-features returned topn.eval() function fetches meta-feature best (local) score","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 'N' best — topn.best","text":"","code":"topn.best(topn.list)"},{"path":"https://github.com/montilab/CaDrA/reference/topn.best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top 'N' best — topn.best","text":"topn.list nested list object returned topn.eval() function best.score.set FALSE. contains ESets well scores resulting meta-feature top 'N'  search mode.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top 'N' best — topn.best","text":"list containing (local) best meta-feature ESet, well corresponding search score","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 'N' evaluate — topn.eval","title":"Top 'N' evaluate — topn.eval","text":"Generates evaluates stepwise search results top 'N' starting indices, checking overlapping resulting features case. function mainly used evaluate search results top 'N' best starting features given dataset.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 'N' evaluate — topn.eval","text":"","code":"topn.eval(   ranking = NULL,   ESet,   N = 1,   do.plot = TRUE,   best.score.only = TRUE,   ... )"},{"path":"https://github.com/montilab/CaDrA/reference/topn.eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top 'N' evaluate — topn.eval","text":"ranking integer vector specifying samples re-ordered. Default NULL. NULL, assume ESet already ordered ESet ordered expression set object sample ordering features processed stepwise.search() function performing step-wise heuristic search N integer specifying number features start search , starting top 'N' features case. Default 1 .plot logical indicating whether want plot resulting evaluation matrix. Default TRUE best.score.logical indicating whether return best meta-feature score top 'N' evaluation. Default TRUE ... additional parameters passed stepwise.search() function, applied top 'N' run","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top 'N' evaluate — topn.eval","text":"Default list lists, list entry one returned stepwise search run given starting index (See stepwise.search()). best.score.set TRUE, best score top N space returned (useful permutation-based testing) 1's 0's represent whether feature given row present meta-feature along starting feature corresponding column.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Top-N result list for simulated binary genomic data — topn.list","title":"Top-N result list for simulated binary genomic data — topn.list","text":"resulting list object returned topn.eval() run sim.ES simulated dataset. default parameters used running topn.eval() except max.size set 10  account presence 10 left-skewed (.e. true positive TP)  features sim.ES dataset.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top-N result list for simulated binary genomic data — topn.list","text":"","code":"data(topn.list)"},{"path":"https://github.com/montilab/CaDrA/reference/topn.list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Top-N result list for simulated binary genomic data — topn.list","text":"list object returned topn.eval containing ExpressionSet objects (corresponding meta-feature scores) search run starting top 7 ranked features. Returned ExpressionSet columns (.e. samples) ranked user-defined ranking variable.   See topn.eval information.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.list.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Top-N result list for simulated binary genomic data — topn.list","text":"Kartha VK, Kern JG, Sebastiani P, Zhang L, Varelas X, Monti S (2017) CaDrA: computational framework performing  candidate driver analyses using binary genomic features.  (bioRxiv)","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top-N result list for simulated binary genomic data — topn.list","text":"","code":"data(topn.list)  # To fetch each search result (Expression Set and score of the corresponding meta-feature) # For N=1 (result when the search is initiated with the top-scoring starting feature) topn.list[[1]] #> $ESet #> ExpressionSet (storageMode: lockedEnvironment) #> assayData: 10 features, 200 samples  #>   element names: exprs  #> protocolData: none #> phenoData: none #> featureData #>   featureNames: TP_8 TP_7 ... TP_5 (10 total) #>   fvarLabels: Feature Type #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation: TN_405  #>  #> $Score #>       TN_405  #> 3.338238e-15  #>   # To fetch just the ExpressionSet object topn.list[[1]]$ESet #> ExpressionSet (storageMode: lockedEnvironment) #> assayData: 10 features, 200 samples  #>   element names: exprs  #> protocolData: none #> phenoData: none #> featureData #>   featureNames: TP_8 TP_7 ... TP_5 (10 total) #>   fvarLabels: Feature Type #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation: TN_405   # ExpressionSet for the search result when starting with the second-best feature topn.list[[2]]$ESet #> ExpressionSet (storageMode: lockedEnvironment) #> assayData: 10 features, 200 samples  #>   element names: exprs  #> protocolData: none #> phenoData: none #> featureData #>   featureNames: TP_8 TP_7 ... TP_5 (10 total) #>   fvarLabels: Feature Type #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation: TP_8   # Or we can find the result that had the best score over the top N (N=7) runs best.meta <- topn.best(topn.list)  # You can now visualize this result using the meta.plot() function  meta.plot(best.meta$ESet)   # Or you can visualize the overlap of features across the top N (N=7) returned meta-features # We do this by passing the topn.list object to the topn.plot() function topn.plot(topn.list) #> Generating top N overlap heatmap.. #>"},{"path":"https://github.com/montilab/CaDrA/reference/topn.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 'N' plot — topn.plot","title":"Top 'N' plot — topn.plot","text":"Plots heatmap representation overlapping features given list top N stepwise search results","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 'N' plot — topn.plot","text":"","code":"topn.plot(topN.list)"},{"path":"https://github.com/montilab/CaDrA/reference/topn.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top 'N' plot — topn.plot","text":"topN.list list lists, list entry one returned stepwise search run given starting index (See ks.stepwise()). computed within, can returned topn.eval() function.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top 'N' plot — topn.plot","text":"heatmap top N evaluation given top N search evaluation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top 'N' plot — topn.plot","text":"","code":"# Load pre-computed Top-N list generated for sim.ES dataset data(topn.list) topn.plot(topn.list) #> Generating top N overlap heatmap.. #>"},{"path":"https://github.com/montilab/CaDrA/reference/topn_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 'N' best — topn_best","title":"Top 'N' best — topn_best","text":"Takes resulting list meta-features returned topn_eval() function fetches meta-feature best (local) score","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 'N' best — topn_best","text":"","code":"topn_best(topn_list)"},{"path":"https://github.com/montilab/CaDrA/reference/topn_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top 'N' best — topn_best","text":"topn_list nested list object returned topn_eval() function best.score.set FALSE. contains ESets well scores resulting meta-feature top 'N'  search mode.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top 'N' best — topn_best","text":"list containing (local) best meta-feature ESet, well corresponding search score","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Top 'N' Best Features — topn_eval","title":"Evaluate Top 'N' Best Features — topn_eval","text":"Generates evaluates candidate search results top 'N' starting indices, checking overlapping resulting features case. function mainly used evaluate search results top 'N' best starting features given dataset.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Top 'N' Best Features — topn_eval","text":"","code":"topn_eval(   ES,   input_score,   method = \"ks\",   custom_function = NULL,   custom_parameters = NULL,   alternative = \"less\",   metric = \"pval\",   weights = NULL,   target_match = \"positive\",   top_N = 1,   search_method = \"both\",   max_size = 7,   best_score_only = TRUE,   do_plot = TRUE,   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/topn_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Top 'N' Best Features — topn_eval","text":"ES expression set binary features (required). must BioBase expressionSet object. rownames expression set must contain unique features used search. input_score vector continuous values target profile (required). input_score must names labels matches colnames expression matrix. method character string specifies method compute score feature (\"ks\" \"wilcox\" \"revealer\" (conditional mutual information REVEALER) \"custom\" (customized method)). Default ks. custom_function method \"custom\", specifies customized function . Default NULL. custom_parameters method \"custom\", specifies list arguments passed custom_function(). Default NULL. alternative character string specifies alternative hypothesis testing (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. metric character string specifies metric use candidate search criteria. \"pval\" \"stat\" may used, corresponding score p-value statistic. Default pval. weights vector weights use perform weighted-KS testing. Default NULL. target_match direction target matching (\"negative\" \"positive\") REVEALER. Use \"positive\" match higher values target, \"negative\" match lower values. Default positive. top_N integer specifies number features start search , starting top 'N' features case. Default 1. search_method character string specifies method filter best candidates (\"forward\" \"\"). Default (backward forward). max_size integer specifies maximum size meta-feature can extend given search. Default 7. best_score_only logical value indicates whether function return score corresponding search results. Default FALSE. do_plot logical value indicates whether plot resulting evaluation matrix. Default TRUE. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Top 'N' Best Features — topn_eval","text":"default, function return list lists, list entry one returned candidate search given starting index (See candidate_search()). best_score_only set TRUE, best score top N space returned (useful permutation-based testing) 1's 0's represent whether feature given row present meta-feature along starting feature corresponding column.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Top 'N' Best Features — topn_eval","text":"","code":"# Load R library library(Biobase)  # Load pre-computed expression set data(sim.ES)  # set seed set.seed(123)  # Provide a vector of continuous scores for a target profile with names to each score value  input_score = rnorm(n = ncol(sim.ES)) names(input_score) <- colnames(sim.ES)  # Define additional parameters and run the function topn_eval <- topn_eval(   ES = sim.ES, input_score = input_score, method = \"ks\",   alternative = \"less\", metric = \"pval\", top_N = 3, search_method = \"both\",    max_size = 7, best_score_only = FALSE ) #> Generating top N overlap heatmap.. #>"},{"path":"https://github.com/montilab/CaDrA/reference/topn_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 'N' Plot — topn_plot","title":"Top 'N' Plot — topn_plot","text":"Plots heatmap representation overlapping features given list top N candidate search results","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 'N' Plot — topn_plot","text":"","code":"topn_plot(topN_list)"},{"path":"https://github.com/montilab/CaDrA/reference/topn_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top 'N' Plot — topn_plot","text":"topN_list list lists, list entry one returned candidate search run given starting index. computed within can returned topn.eval() function.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top 'N' Plot — topn_plot","text":"heatmap top N evaluation given top N search evaluation","code":""},{"path":"https://github.com/montilab/CaDrA/reference/topn_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top 'N' Plot — topn_plot","text":"","code":"# Load pre-computed Top-N list generated for sim.ES dataset data(topn.list) topn_plot(topn.list) #> Generating top N overlap heatmap.. #>"},{"path":"https://github.com/montilab/CaDrA/reference/wilcox.genescore.mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise matrix Wilcoxon rank sum scoring — wilcox.genescore.mat","title":"Row-wise matrix Wilcoxon rank sum scoring — wilcox.genescore.mat","text":"Compute rank sum scores row given binary matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox.genescore.mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-wise matrix Wilcoxon rank sum scoring — wilcox.genescore.mat","text":"","code":"wilcox.genescore.mat(   mat,   alt = c(\"two.sided\", \"less\", \"greater\"),   ranks = NULL )"},{"path":"https://github.com/montilab/CaDrA/reference/wilcox.genescore.mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise matrix Wilcoxon rank sum scoring — wilcox.genescore.mat","text":"mat matrix binary features compute row-wise scores based Wilcoxon rank sum test alt character string specifying alternative hypothesis, must one \"two.sided\",\"less\" \"greater\". Value passed wilcox.genescore() function ranks vector ranks use performing Wilcoxon test. Default NULL. NULL, samples assumed ordered increasing ranking. Value passed wilcox.genescore() function","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox.genescore.mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise matrix Wilcoxon rank sum scoring — wilcox.genescore.mat","text":"2 x N matrix (N = number rows matrix) first second rows corresponding rank sum statistic scores p-values, respectively","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute rank sum scores for a given binary feature — wilcox_genescore","title":"Compute rank sum scores for a given binary feature — wilcox_genescore","text":"Compute rank sum scores given binary feature","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute rank sum scores for a given binary feature — wilcox_genescore","text":"","code":"wilcox_genescore(   x,   y,   mu = 0,   alternative = \"less\",   paired = FALSE,   exact = FALSE,   correct = TRUE )"},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute rank sum scores for a given binary feature — wilcox_genescore","text":"x integer ranked values group 1 y integer ranked values group 2 mu number uses optional parameter form null hypothesis. Default 0. alternative alternative hypothesis p-value calculation (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. paired whether perform paired test. Default FALSE. exact whether compute exact p-value. Default FALSE. correct whether consider continuity correction p-value. Default TRUE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute rank sum scores for a given binary feature — wilcox_genescore","text":"data frame two columns: score p_value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","title":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","text":"Compute directional Wilcoxon rank sum score row given binary matrix","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","text":"","code":"wilcox_genescore_mat(   mat,   ranks = NULL,   alternative = c(\"two.sided\", \"greater\", \"less\"),   verbose = FALSE )"},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","text":"mat matrix binary features (required). ranks vector sample rankings use perform Wilcoxon test. Default NULL. NULL, samples assumed ordered increasing rankings. NULL, ranks must include labels names associated colnames feature matrix. alternative character string specifies alternative hypothesis testing (\"two.sided\" \"greater\" \"less\"). Default less left-skewed significance testing. verbose logical value indicates whether print diagnostic messages. Default FALSE.","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","text":"data frame two columns: score p_value","code":""},{"path":"https://github.com/montilab/CaDrA/reference/wilcox_genescore_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wilcoxon Rank Sum Scoring Method — wilcox_genescore_mat","text":"","code":"# Load R library library(Biobase) # Load pre-computed expression set data(sim.ES)  # Define additional parameters and run the function wilcox_genescore_mat_result <- wilcox_genescore_mat(   mat = exprs(sim.ES),    ranks = NULL,   alternative = \"less\" )"}]
