% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/candidate_search.R
\name{candidate_search}
\alias{candidate_search}
\title{Candidate Search}
\usage{
candidate_search(
  ES,
  input_score,
  method = c("ks", "wilcox", "revealer", "custom"),
  custom_function = NULL,
  custom_paramters = NULL,
  alternative = c("two.sided", "less", "greater"),
  metric = c("stat", "pval"),
  weights = NULL,
  ranks = NULL,
  search_start = NULL,
  search_method = c("forward", "both"),
  max_size = 7,
  best_score_only = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{ES}{an expression set object of binary features (required). It must be a BioBase expressionSet object. The rownames or featureData of the expression set must contain the names of the corresponding features which are used in the search.}

\item{input_score}{a vector of continuous values (required).}

\item{method}{a character string specifying the method used to compute scores for features, must be one of "ks" or "wilcox" or "mi" (mutually exclusive method from REVEALER) or "custom" (a personal customization method). If input_score contains ranked scores, then 'ks' method is used by default. Otherwise, 'mi" is the default method}

\item{custom_function}{a character string specifying the method used to compute scores for features, must be one of "ks" or "wilcox" or "mi" (mutually exclusive method from REVEALER) or "custom" (a personal customization method). If input_score contains ranked scores, then 'ks' method is used by default. Otherwise, 'mi" is the default method}

\item{custom_paramters}{a character string specifying the method used to compute scores for features, must be one of "ks" or "wilcox" or "mi" (mutually exclusive method from REVEALER) or "custom" (a personal customization method). If input_score contains ranked scores, then 'ks' method is used by default. Otherwise, 'mi" is the default method}

\item{alternative}{a character string specifying the alternative hypothesis, must be one of "two.sided", "greater" or "less". Default is "less" for left-skewed significance testing.}

\item{metric}{a character string specifying which metric to use for candidate search. One of either 'pval' or 'stat' may be used, corresponding to the score p-value or statistic. Default is 'pval'}

\item{weights}{an integer vector of weight to use if performing weighted-KS testing. Default is NULL. Value passed to compute_score() function}

\item{ranks}{an integer vector of sample rankings to use if performing Wilcoxon rank sum testing. Default is NULL. If NULL, then samples are assumed to be ordered by increasing ranking. Value passed to compute_score() function}

\item{search_start}{a customize function that computes the score. It will be used when the 'method' is set to 'custom'}

\item{search_method}{a character string specifying which method to perform or filter out the best candidates. Default is 'forward'.}

\item{max_size}{an integer specifying the maximum size a meta-feature can extend to do for a given search. Default is 7}

\item{best_score_only}{a logical indicating whether or not the function should return only the score corresponding to the search results. Default is FALSE}

\item{verbose}{a logical indicating whether or not to verbose diagnostic messages. Default is FALSE}
}
\value{
If \code{best_score_only} is set to \code{TRUE}, this function returns a list object with the score corresponding to the union of the search meta-feature. If this is set to FALSE, a list containing both the ES object pertaining to the returned meta-feature as well as the corresponding score is returned.
}
\description{
Performs heuristic search using an ordered set of binary features to see whether there are features whose union is more skewed (enriched at the extremes) than either features alone. This is the main functionality of the CaDrA package.
}
\examples{
# Load R library
library(Biobase)

# Load pre-computed expression set
data(sim.ES)

# Provide a vector of ranking or a list of continuous scores
input_score = ncol(sim.ES):1
names(input_score) <- colnames(sim.ES)

# Define additional parameters and start the candidate search
candidate_search_result <- candidate_search(
ES = sim.ES, input_score = input_score, method = "ks",
alternative = "less", metric = "pval", search_method = "both", max_size = 7,
best_score_only = FALSE
)

}
