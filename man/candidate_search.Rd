% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/candidate_search.R
\name{candidate_search}
\alias{candidate_search}
\title{Candidate Search}
\usage{
candidate_search(
  ES,
  input_score,
  method = "ks",
  custom_function = NULL,
  custom_parameters = NULL,
  alternative = "less",
  metric = "stat",
  weights = NULL,
  ranks = NULL,
  target_match = "positive",
  search_start = NULL,
  search_method = "both",
  max_size = 7,
  best_score_only = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{ES}{an expression set of binary features (required). It must be a BioBase expressionSet object. The rownames of the expression set must contain unique features which are used in the search.}

\item{input_score}{a vector of continuous values for a target profile (required). The input_score must have names or labels that matches the colnames of the expression matrix.}

\item{method}{a character string specifies a method to compute the score for each feature (\code{"ks"} or \code{"wilcox"} or \code{"revealer"} (conditional mutual information from REVEALER) or \code{"custom"} (a customized method)). Default is \code{ks}.}

\item{custom_function}{if method is \code{"custom"}, specifies the customized function here. Default is \code{NULL}.}

\item{custom_parameters}{if method is \code{"custom"}, specifies a list of arguments to be passed to the custom_function(). Default is \code{NULL}.}

\item{alternative}{a character string specifies an alternative hypothesis testing (\code{"two.sided"} or \code{"greater"} or \code{"less"}). Default is \code{less} for left-skewed significance testing.}

\item{metric}{a character string specifies a metric to use for candidate search criteria. \code{"pval"} or \code{"stat"} may be used, corresponding to the score p-value or statistic. Default is \code{pval}.}

\item{weights}{a vector of weights use to perform a weighted-KS testing. Default is \code{NULL}.}

\item{ranks}{a vector of sample rankings use to perform Wilcoxon rank sum testing. Default is \code{NULL}. If NULL, samples are assumed to be ordered by increasing rankings.}

\item{target_match}{a direction of target matching (\code{"negative"} or \code{"positive"}) from REVEALER. Use \code{"positive"} to match the higher values of the target, \code{"negative"} to match the lower values. Default is \code{positive}.}

\item{search_start}{an integer specifies an index within the expression set object of which feature to start the candidate search with. Default is \code{NULL}. If NULL, then the search starts with the top ranked feature. If an integer is specified (N, where N < nrow(ES)), the search starts with the Nth best feature. If a string is specified, the search starts with the feature with this name (must be a valid rowname in ES)}

\item{search_method}{a character string specifies a method to filter out the best candidates (\code{"forward"} or \code{"both"}). Default is \code{both} (backward and forward).}

\item{max_size}{an integer specifies a maximum size that a meta-feature can extend to do for a given search. Default is \code{7}.}

\item{best_score_only}{a logical value indicates whether or not the function should return only the score corresponding to the search results. Default is \code{FALSE}.}

\item{verbose}{a logical value indicates whether or not to print the diagnostic messages. Default is \code{FALSE}.}
}
\value{
If \code{best_score_only} is set to \code{TRUE}, this function returns a list object with the score corresponding to the union of the search meta-feature. If \code{best_score_only} is set to \code{FALSE}, a list containing both the ES object pertaining to the returned meta-feature as well as the corresponding score is returned.
}
\description{
Performs heuristic search on a set of binary features to determine whether there are features whose union is more skewed (enriched at the extremes) than either features alone. This is the main functionality of the CaDrA package.
}
\examples{
# Load R library
library(Biobase)

# Load pre-computed expression set
data(sim.ES)

# Provide a vector of continuous scores for a target profile with names to each score value 
input_score = rnorm(n = ncol(sim.ES))
names(input_score) <- colnames(sim.ES)

# Define additional parameters and run the function
candidate_search_result <- candidate_search(
  ES = sim.ES, input_score = input_score, method = "ks", 
  alternative = "less", weights = NULL, metric = "pval", 
  search_start = NULL, search_method = "both", 
  max_size = 7, best_score_only = FALSE
)

}
