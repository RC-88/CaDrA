% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ks_gene_score.R
\name{ks_gene_score}
\alias{ks_gene_score}
\title{Compute a Kolmogorov-Smirnov score for a given ranked list}
\usage{
ks_gene_score(
  n.x,
  y,
  weights = NULL,
  weight_p = 1,
  alternative = c("less", "greater", "two.sided"),
  do_pval = TRUE,
  absolute = FALSE,
  exact = NULL,
  plot_dat = FALSE
)
}
\arguments{
\item{n.x}{length of a ranked list}

\item{y}{positions of interested geneset items in the ranked list}

\item{weights}{weights for weighted score (see Subramanian et al.) 
(usually, sort(score))}

\item{weight_p}{weights exponent}

\item{alternative}{alternative hypothesis for p-value calculation 
(\code{"two.sided"} or \code{"greater"} or \code{"less"}). 
Default is \code{less} for left-skewed significance testing.}

\item{do_pval}{compute asymptotic p-value}

\item{absolute}{takes max - min score rather than the maximum 
deviation from null}

\item{exact}{compute exact p-value}

\item{plot_dat}{return dataframe of x and y axis data for ES plot}
}
\value{
a data frame with two columns: \code{score} and \code{p_value}
}
\description{
Compute a Kolmogorov-Smirnov score for a given ranked list
}
\examples{

# Load R library
library(Biobase)

# Load pre-computed Top-N list generated for sim.ES dataset
data(topn.list)

# With the results obtained from top-N evaluation,
# We can find the combination of features that gives the best score 
# in top N searches
topn_best_meta <- topn_best(topn_list=topn.list) 

# Extract the meta-feature set
ESet <-  topn_best_meta[["ESet"]]                    

# Make sure mat variable is a matrix
mat <- as.matrix(exprs(ESet))

# For cases when matrix only has one row
if(ncol(mat) == 1){
  mat <- matrix(t(mat), nrow=1, byrow=TRUE, 
  dimnames = list(rownames(ESet), rownames(mat))) 
}

# Add on the OR function of all the returned entries
or <- ifelse(colSums(mat)==0, 0, 1)

mat <- rbind(mat, or)

# Get x and y axis data for ES plot of 
# cumulative function of individual features (i.e. the OR function)
ES_dat <- ks_gene_score(
   n.x=length(or), y=which(or==1), plot_dat = TRUE, alternative = "less"
)

}
