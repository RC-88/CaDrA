% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/revealer_genescore.R
\name{revealer_genescore}
\alias{revealer_genescore}
\title{Compute Conditional Mutual Information of x and y given z from \code{REVEALER}}
\usage{
revealer_genescore(
  x,
  y,
  z = NULL,
  assoc_metric = "IC",
  target_match = "positive"
)
}
\arguments{
\item{x}{a vector of continuous values of a given functional response of interest}

\item{y}{a binary feature for a given response of interest}

\item{z}{a binary feature often known as causes of activation that associated with a given response of interest}

\item{assoc_metric}{an association metric: information coefficient (\code{"IC"} by default) or correlation (\code{"COR"}) from \code{REVEALER}}

\item{target_match}{a direction of target matching (\code{"negative"} or \code{"positive"}). Use \code{"positive"} to match the higher values of the target, \code{"negative"} to match the lower values. Default is \code{positive}.}
}
\value{
a data frame with two columns: \code{score} and \code{p_value}
}
\description{
Compute Conditional Mutual Information of x and y given z from \code{REVEALER}
}
\examples{

# load R library
library(purrr)
library(Biobase)

# Load pre-computed expression set
data(sim.ES)

# set seed
set.seed(123)

# Extract the expression matrix
mat = exprs(sim.ES)

# Provide a vector of continuous scores for a target profile
input_score = rnorm(n = ncol(sim.ES))
names(input_score) <- colnames(sim.ES)

cmi <- seq_len(nrow(mat)) \%>\% 
purrr::map_dbl(
 function(r){
   revealer_genescore(
     x=input_score, y=mat[r,], z=NULL, assoc_metric="IC", target_match="positive"
   ) 
 }
)
  
}
